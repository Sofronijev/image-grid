{"version":3,"sources":["redux/index.js","components/Card.js","components/CardColumn.js","components/Addimage.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","images","loading","error","store","createStore","state","action","type","filter","image","id","payload","url","Math","floor","random","map","image_id","categories","category","category_id","newCategory","name","category_name","applyMiddleware","thunk","Card","height","width","dispatch","useDispatch","useState","liked","setLiked","inputText","setInputText","inputRef","useRef","cardRef","addRef","changeCardSize","size","current","style","ref","className","src","alt","onClick","currVal","showCategories","title","display","placeholder","value","onChange","e","target","CardColumn","Addimage","imageUrl","setImageUrl","trim","console","log","addImage","App","columnsNum","setColumnsNum","useSelector","useEffect","fetch","then","res","json","catch","message","handleResize","window","innerWidth","addEventListener","arr","columns","i","push","splice","ceil","length","index","createImageColumns","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3a0fbaa.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from \"redux-thunk\"\r\n\r\nexport function getImages() {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: \"FETCH_REQUEST\"\r\n        })\r\n        fetch('https://api.thecatapi.com/v1/images/search?limit=80&mime_t􀁜pes=&order=Random&si􀁝e=small&page=3&sub_id=demo-ce06ee')\r\n            .then(res => res.json())\r\n            .then(images => {\r\n                dispatch({\r\n                    type: \"FETCH_SUCCESS\",\r\n                    // added liked property for like button\r\n                    payload: images\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: \"FETCH_ERROR\",\r\n                    payload: error.message\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function deleteImage(image_id) {\r\n    return {\r\n        type: \"DELETE_IMAGE\",\r\n        payload: image_id\r\n    }\r\n}\r\n\r\nexport function removeCategory(image_id, category_id) {\r\n    return {\r\n        type: \"DELETE_CATEGORY\",\r\n        payload: { image_id, category_id }\r\n    }\r\n}\r\n\r\nexport function addCategory(image_id, category_name) {\r\n    return {\r\n        type: \"ADD_CATEGORY\",\r\n        payload: { image_id, category_name }\r\n    }\r\n}\r\n\r\nexport function addImage(imageUrl) {\r\n    console.log(imageUrl)\r\n    return {\r\n        type: \"ADD_IMAGE\",\r\n        payload: imageUrl\r\n    }\r\n}\r\n\r\n\r\nconst initialState = {\r\n    images: [],\r\n    loading: true,\r\n    error: \"\"\r\n}\r\n\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"DELETE_IMAGE\":\r\n            return {\r\n                ...state,\r\n                images: state.images.filter(image => image.id !== action.payload)\r\n            }\r\n        case \"ADD_IMAGE\": {\r\n            return {\r\n                ...state,\r\n                images: [\r\n                    {\r\n                        url: action.payload,\r\n                        id:Math.floor(Math.random() * 9999)\r\n                    },\r\n                    ...state.images\r\n                ]\r\n            }\r\n        }\r\n        case \"DELETE_CATEGORY\":\r\n            // first it finds image then filters its categories and deletes the one selected\r\n            return {\r\n                ...state,\r\n                images: state.images.map(image => {\r\n                    if (image.id === action.payload.image_id) {\r\n                        return {\r\n                            ...image,\r\n                            categories: image.categories.filter(category => category.id !== action.payload.category_id)\r\n                        }\r\n                    } else return image\r\n\r\n                })\r\n            }\r\n\r\n        case \"ADD_CATEGORY\":\r\n            const newCategory = {\r\n                // adding random number for ID\r\n                id: Math.floor(Math.random() * 9999),\r\n                name: action.payload.category_name\r\n            }\r\n            return {\r\n                ...state,\r\n                images: state.images.map(image => {\r\n                    if (image.id === action.payload.image_id) {\r\n                        //if there is image.categories property then use spread syntax to get all existing categories else create category property\r\n                        return image.categories ?\r\n                            {\r\n                                ...image,\r\n                                categories: [\r\n                                    ...image.categories,\r\n                                    newCategory\r\n                                ]\r\n                            } :\r\n                            {\r\n                                ...image,\r\n                                categories: [\r\n                                    newCategory\r\n                                ]\r\n                            }\r\n\r\n                    } else return image\r\n\r\n                })\r\n            }\r\n        case \"FETCH_REQUEST\":\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case \"FETCH_SUCCESS\":\r\n            return {\r\n                images: action.payload,\r\n                loading: false,\r\n                error: \"\"\r\n            }\r\n        case \"FETCH_ERROR\":\r\n            return {\r\n                images: [],\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk))\r\n//store.subscribe(() => console.log(\"REDUX\", store.getState()))\r\nexport default store","import React, { useRef, useState } from 'react'\r\nimport { useDispatch } from \"react-redux\"\r\nimport { deleteImage, removeCategory, addCategory } from '../redux'\r\n\r\nexport default function Card({ image }) {\r\n\r\n    const { url, id, categories, height, width } = image\r\n    const dispatch = useDispatch()\r\n    const [liked, setLiked] = useState(false)\r\n    const [inputText, setInputText] = useState(\"\")\r\n    const inputRef = useRef(null)\r\n    const cardRef = useRef(null)\r\n    const addRef = useRef(null)\r\n\r\n\r\n    function showCategories() {\r\n        if (categories) {\r\n            return categories.map(category => <p key={category.id}>{category.name} <span onClick={() => dispatch(removeCategory(id, category.id))}>x</span></p>)\r\n        }\r\n    }\r\n\r\n    function changeInput(e) {\r\n        setInputText(e.target.value)\r\n    }\r\n\r\n    function showInput() {\r\n        inputRef.current.style.display = \"grid\"\r\n        addRef.current.style.display = \"none\"\r\n    }\r\n\r\n    function closeInput() {\r\n        inputRef.current.style.display = \"none\"\r\n        addRef.current.style.display = \"inline-block\"\r\n        setInputText(\"\")\r\n    }\r\n\r\n    function submitInput() {\r\n        dispatch(addCategory(id, inputText))\r\n        setInputText(\"\")\r\n    }\r\n\r\n    function changeCardSize(size) {\r\n        cardRef.current.style.width = size\r\n    }\r\n\r\n    return (\r\n        <div ref={cardRef} className=\"card\">\r\n            <img width={width} height={height} src={url} alt={url}></img>\r\n            <div className=\"card-overlay\">\r\n                <button onClick={() => dispatch(deleteImage(id))}>❌</button>\r\n                <button onClick={() => setLiked(currVal => !currVal)}>{liked ? \"💖\" : '🖤'}</button>\r\n                <div className=\"size-buttons\">\r\n                    <button onClick={() => changeCardSize(\"50%\")} type=\"button\">S</button>\r\n                    <button onClick={() => changeCardSize(\"70%\")} type=\"button\">M</button>\r\n                    <button onClick={() => changeCardSize(\"100%\")} type=\"button\">L</button>\r\n                </div>\r\n                <div className=\"categories\">\r\n                    {showCategories()}\r\n                    <p ref={addRef} className=\"add-category\" title=\"Add category\" onClick={showInput}>+</p>\r\n                    <div ref={inputRef} className=\"input-container\">\r\n                        <input type=\"text\" placeholder=\"Add category\" value={inputText} onChange={changeInput}></input>\r\n                        <span className=\"submit\" onClick={submitInput}>✔</span>\r\n                        <span className=\"cancel\" onClick={closeInput}>✖</span>\r\n                    </div>\r\n                </div>\r\n            </div>            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nexport default function CardColumn({ images }) {    \r\n\r\n    function showAllImages() {\r\n        return images.map(image => {\r\n            return <Card key={image.id} image={image} />\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"card-columns\">\r\n            {showAllImages()}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { addImage } from '../redux'\r\n\r\nexport default function Addimage() {\r\n\r\n    const dispatch = useDispatch()\r\n    const [imageUrl, setImageUrl] = useState(\"\")\r\n\r\n    function submitImage() {\r\n        if (imageUrl.trim() === \"\") {\r\n            return\r\n        }\r\n        dispatch(addImage(imageUrl))\r\n    }\r\n\r\n    return (\r\n        // Using img URL to upload new image to grid and add it to state\r\n        <div className=\"add-image\">\r\n            <input value={imageUrl} onChange={(e) => setImageUrl(e.target.value)} type=\"text\" placeholder=\"Enter image URL\"></input>\r\n            <button type=\"button\" onClick={submitImage}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n","import './App.scss';\nimport CardColumn from './components/CardColumn'\nimport Addimage from './components/Addimage'\nimport { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { getImages } from './redux'\n\n\nfunction App() {\n  //number of image columns on page, default 3\n  const [columnsNum, setColumnsNum] = useState(3)\n  const state = useSelector(state => state)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(getImages())\n  }, [dispatch])\n\n  //Changing number of columns based on window width, so it looks better when screen is smaller and there are 2 columns\n  useEffect(() => {\n    function handleResize() {\n      if (window.innerWidth > 1008) {\n        setColumnsNum(3)\n      } else if (window.innerWidth > 641) {\n        setColumnsNum(2)\n      } else setColumnsNum(1)\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => {\n      window.addEventListener('resize', handleResize)\n    }\n  }, [])\n  \n  function createImageColumns() {\n    if (state.loading === false) {\n      //create new array so state doesnt get deleted after splice()\n      let arr = [...state.images]\n      let columns = []\n      //loop through all images and split them in 3 arays\n      for (let i = columnsNum; i > 0; i--) {\n        columns.push(arr.splice(0, Math.ceil(arr.length / i)));\n      }\n      return columns.map((images, index) => {\n        return <CardColumn key={index} images={images} />\n      })\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Catsplash</h1>\n      <Addimage />\n      <main>\n        {state.loading ? <h2>Loading...</h2> :\n          state.error ? <h2>{state.error}</h2> :\n            createImageColumns()}\n      </main>\n    </div>\n  );\n}\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}